// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenWater2.DataAccess.Data;

namespace OpenWater2.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OpenWater2.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TAttainsAssess", b =>
                {
                    b.Property<int>("AttainsAssessIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ATTAINS_ASSESS_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgencyCode")
                        .HasColumnName("AGENCY_CODE")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int>("AttainsAssessUnitIdx")
                        .HasColumnName("ATTAINS_ASSESS_UNIT_IDX")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("CycleLastAssessed")
                        .HasColumnName("CYCLE_LAST_ASSESSED")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("CycleLastMonitored")
                        .HasColumnName("CYCLE_LAST_MONITORED")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifyDt")
                        .HasColumnName("MODIFY_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifyUserid")
                        .HasColumnName("MODIFY_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("ReportStatus")
                        .IsRequired()
                        .HasColumnName("REPORT_STATUS")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ReportingCycle")
                        .IsRequired()
                        .HasColumnName("REPORTING_CYCLE")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("TrophicStatusCode")
                        .HasColumnName("TROPHIC_STATUS_CODE")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("AttainsAssessIdx")
                        .HasName("PK_ATTAINS_ASSESS");

                    b.HasIndex("AttainsAssessUnitIdx");

                    b.ToTable("T_ATTAINS_ASSESS");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TAttainsAssessCause", b =>
                {
                    b.Property<int>("AttainsAssessCauseIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ATTAINS_ASSESS_CAUSE_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgencyCode")
                        .HasColumnName("AGENCY_CODE")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int>("AttainsAssessIdx")
                        .HasColumnName("ATTAINS_ASSESS_IDX")
                        .HasColumnType("int");

                    b.Property<string>("CauseComment")
                        .HasColumnName("CAUSE_COMMENT")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("CauseName")
                        .HasColumnName("CAUSE_NAME")
                        .HasColumnType("varchar(240)")
                        .HasMaxLength(240)
                        .IsUnicode(false);

                    b.Property<string>("ConsentDecreeCycle")
                        .HasColumnName("CONSENT_DECREE_CYCLE")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("CycleExpectedAttain")
                        .HasColumnName("CYCLE_EXPECTED_ATTAIN")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("CycleFirstListed")
                        .HasColumnName("CYCLE_FIRST_LISTED")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("CycleSchedTmdl")
                        .HasColumnName("CYCLE_SCHED_TMDL")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifyDt")
                        .HasColumnName("MODIFY_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifyUserid")
                        .HasColumnName("MODIFY_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("PollutantInd")
                        .HasColumnName("POLLUTANT_IND")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("TmdlCauseReportId")
                        .HasColumnName("TMDL_CAUSE_REPORT_ID")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("TmdlPriorityName")
                        .HasColumnName("TMDL_PRIORITY_NAME")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("AttainsAssessCauseIdx")
                        .HasName("PK_ATTAINS_ASSESS_CAUSE");

                    b.HasIndex("AttainsAssessIdx");

                    b.ToTable("T_ATTAINS_ASSESS_CAUSE");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TAttainsAssessUnits", b =>
                {
                    b.Property<int>("AttainsAssessUnitIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ATTAINS_ASSESS_UNIT_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActInd")
                        .HasColumnName("ACT_IND")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("AgencyCode")
                        .HasColumnName("AGENCY_CODE")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("AssessUnitId")
                        .IsRequired()
                        .HasColumnName("ASSESS_UNIT_ID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AssessUnitName")
                        .HasColumnName("ASSESS_UNIT_NAME")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("AttainsReportIdx")
                        .HasColumnName("ATTAINS_REPORT_IDX")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("LocationDesc")
                        .HasColumnName("LOCATION_DESC")
                        .HasColumnType("varchar(2000)")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifyDt")
                        .HasColumnName("MODIFY_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifyUserid")
                        .HasColumnName("MODIFY_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("StateCode")
                        .HasColumnName("STATE_CODE")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("UseClassCode")
                        .HasColumnName("USE_CLASS_CODE")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("UseClassName")
                        .HasColumnName("USE_CLASS_NAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("WaterSize")
                        .HasColumnName("WATER_SIZE")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("WaterTypeCode")
                        .HasColumnName("WATER_TYPE_CODE")
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("WaterUnitCode")
                        .HasColumnName("WATER_UNIT_CODE")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("AttainsAssessUnitIdx")
                        .HasName("PK_ATTAINS_ASSESS_UNIT");

                    b.HasIndex("AttainsReportIdx");

                    b.HasIndex("WaterTypeCode");

                    b.ToTable("T_ATTAINS_ASSESS_UNITS");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TAttainsAssessUnitsMloc", b =>
                {
                    b.Property<int>("AttainsAssessUnitIdx")
                        .HasColumnName("ATTAINS_ASSESS_UNIT_IDX")
                        .HasColumnType("int");

                    b.Property<int>("MonlocIdx")
                        .HasColumnName("MONLOC_IDX")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifyDt")
                        .HasColumnName("MODIFY_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifyUserid")
                        .HasColumnName("MODIFY_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("AttainsAssessUnitIdx", "MonlocIdx")
                        .HasName("PK_ATTAINS_ASSESS_UNIT_MLOC");

                    b.HasIndex("MonlocIdx");

                    b.ToTable("T_ATTAINS_ASSESS_UNITS_MLOC");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TAttainsAssessUse", b =>
                {
                    b.Property<int>("AttainsAssessUseIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ATTAINS_ASSESS_USE_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssessBasis")
                        .HasColumnName("ASSESS_BASIS")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("AssessConfidence")
                        .HasColumnName("ASSESS_CONFIDENCE")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AssessDate")
                        .HasColumnName("ASSESS_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("AssessType")
                        .HasColumnName("ASSESS_TYPE")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("AssessorName")
                        .HasColumnName("ASSESSOR_NAME")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<int>("AttainsAssessIdx")
                        .HasColumnName("ATTAINS_ASSESS_IDX")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("IrCatCode")
                        .HasColumnName("IR_CAT_CODE")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("IrCatDesc")
                        .HasColumnName("IR_CAT_DESC")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifyDt")
                        .HasColumnName("MODIFY_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifyUserid")
                        .HasColumnName("MODIFY_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<DateTime?>("MonDateEnd")
                        .HasColumnName("MON_DATE_END")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("MonDateStart")
                        .HasColumnName("MON_DATE_START")
                        .HasColumnType("datetime");

                    b.Property<string>("ThreatenedInd")
                        .HasColumnName("THREATENED_IND")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("TrendCode")
                        .HasColumnName("TREND_CODE")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("UseAttainmentCode")
                        .HasColumnName("USE_ATTAINMENT_CODE")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("UseName")
                        .HasColumnName("USE_NAME")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("AttainsAssessUseIdx")
                        .HasName("PK_ATTAINS_ASSESS_USE");

                    b.HasIndex("AttainsAssessIdx");

                    b.ToTable("T_ATTAINS_ASSESS_USE");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TAttainsAssessUsePar", b =>
                {
                    b.Property<int>("AttainsAssessUseParIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ATTAINS_ASSESS_USE_PAR_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttainsAssessUseIdx")
                        .HasColumnName("ATTAINS_ASSESS_USE_IDX")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifyDt")
                        .HasColumnName("MODIFY_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifyUserid")
                        .HasColumnName("MODIFY_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("ParamAttainmentCode")
                        .HasColumnName("PARAM_ATTAINMENT_CODE")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("ParamComment")
                        .HasColumnName("PARAM_COMMENT")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("ParamName")
                        .HasColumnName("PARAM_NAME")
                        .HasColumnType("varchar(240)")
                        .HasMaxLength(240)
                        .IsUnicode(false);

                    b.Property<string>("TrendCode")
                        .HasColumnName("TREND_CODE")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("AttainsAssessUseParIdx")
                        .HasName("PK_ATTAINS_ASSESS_USE_PAR");

                    b.HasIndex("AttainsAssessUseIdx");

                    b.ToTable("T_ATTAINS_ASSESS_USE_PAR");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TAttainsRefWaterType", b =>
                {
                    b.Property<string>("WaterTypeCode")
                        .HasColumnName("WATER_TYPE_CODE")
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("WaterTypeCode")
                        .HasName("PK_ATTAINS_REF_WATER_TYPE");

                    b.ToTable("T_ATTAINS_REF_WATER_TYPE");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TAttainsReport", b =>
                {
                    b.Property<int>("AttainsReportIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ATTAINS_REPORT_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AttainsInd")
                        .HasColumnName("ATTAINS_IND")
                        .HasColumnType("bit");

                    b.Property<string>("AttainsSubmitStatus")
                        .HasColumnName("ATTAINS_SUBMIT_STATUS")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AttainsUpdateDt")
                        .HasColumnName("ATTAINS_UPDATE_DT")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DataFrom")
                        .HasColumnName("DATA_FROM")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataTo")
                        .HasColumnName("DATA_TO")
                        .HasColumnType("datetime");

                    b.Property<string>("OrgId")
                        .IsRequired()
                        .HasColumnName("ORG_ID")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasColumnName("REPORT_NAME")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("AttainsReportIdx")
                        .HasName("PK_ATTAINS_REPORT");

                    b.HasIndex("OrgId");

                    b.ToTable("T_ATTAINS_REPORT");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TAttainsReportLog", b =>
                {
                    b.Property<int>("AttainsLogIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ATTAINS_LOG_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttainsReportIdx")
                        .HasColumnName("ATTAINS_REPORT_IDX")
                        .HasColumnType("int");

                    b.Property<string>("CdxSubmitStatus")
                        .HasColumnName("CDX_SUBMIT_STATUS")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("CdxSubmitTransid")
                        .HasColumnName("CDX_SUBMIT_TRANSID")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("OrgId")
                        .HasColumnName("ORG_ID")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<byte[]>("ResponseFile")
                        .HasColumnName("RESPONSE_FILE")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ResponseTxt")
                        .HasColumnName("RESPONSE_TXT")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime>("SubmitDt")
                        .HasColumnName("SUBMIT_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("SubmitFile")
                        .HasColumnName("SUBMIT_FILE")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("AttainsLogIdx")
                        .HasName("PK_ATTAINS_REPORT_LOG");

                    b.HasIndex("AttainsReportIdx");

                    b.ToTable("T_ATTAINS_REPORT_LOG");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TEpaOrgs", b =>
                {
                    b.Property<string>("OrgId")
                        .HasColumnName("ORG_ID")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("OrgFormalName")
                        .IsRequired()
                        .HasColumnName("ORG_FORMAL_NAME")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDt")
                        .HasColumnName("UPDATE_DT")
                        .HasColumnType("datetime");

                    b.HasKey("OrgId")
                        .HasName("PK_EPA_ORGANIZATION");

                    b.ToTable("T_EPA_ORGS");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TOeAppSettings", b =>
                {
                    b.Property<int>("SettingIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SETTING_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("EncryptInd")
                        .HasColumnName("ENCRYPT_IND")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDt")
                        .HasColumnName("MODIFY_DT")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("ModifyUserid")
                        .HasColumnName("MODIFY_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("SettingDesc")
                        .HasColumnName("SETTING_DESC")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("SettingName")
                        .IsRequired()
                        .HasColumnName("SETTING_NAME")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SettingValue")
                        .HasColumnName("SETTING_VALUE")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("SettingValueSalt")
                        .HasColumnName("SETTING_VALUE_SALT")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("SettingIdx");

                    b.ToTable("T_OE_APP_SETTINGS");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TOeAppTasks", b =>
                {
                    b.Property<int>("TaskIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TASK_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ModifyDt")
                        .HasColumnName("MODIFY_DT")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("ModifyUserid")
                        .HasColumnName("MODIFY_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("TaskDesc")
                        .IsRequired()
                        .HasColumnName("TASK_DESC")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("TaskFreqMs")
                        .HasColumnName("TASK_FREQ_MS")
                        .HasColumnType("int");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnName("TASK_NAME")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("TaskStatus")
                        .IsRequired()
                        .HasColumnName("TASK_STATUS")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("TaskIdx");

                    b.ToTable("T_OE_APP_TASKS");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TOeRoles", b =>
                {
                    b.Property<int>("RoleIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ROLE_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifyDt")
                        .HasColumnName("MODIFY_DT")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("ModifyUserid")
                        .HasColumnName("MODIFY_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("RoleDesc")
                        .IsRequired()
                        .HasColumnName("ROLE_DESC")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnName("ROLE_NAME")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("RoleIdx");

                    b.ToTable("T_OE_ROLES");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TOeSysLog", b =>
                {
                    b.Property<int>("SysLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SYS_LOG_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LogDt")
                        .HasColumnName("LOG_DT")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("LogMsg")
                        .HasColumnName("LOG_MSG")
                        .HasColumnType("varchar(2000)")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<string>("LogType")
                        .HasColumnName("LOG_TYPE")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int?>("LogUseridx")
                        .HasColumnName("LOG_USERIDX")
                        .HasColumnType("int");

                    b.HasKey("SysLogId")
                        .HasName("PK_T_REF_SYS_LOG");

                    b.ToTable("T_OE_SYS_LOG");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TOeUserRoles", b =>
                {
                    b.Property<int>("UserRoleIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("USER_ROLE_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<int>("RoleIdx")
                        .HasColumnName("ROLE_IDX")
                        .HasColumnType("int");

                    b.Property<int>("UserIdx")
                        .HasColumnName("USER_IDX")
                        .HasColumnType("int");

                    b.HasKey("UserRoleIdx");

                    b.HasIndex("RoleIdx");

                    b.HasIndex("UserIdx", "RoleIdx")
                        .IsUnique()
                        .HasName("UK_T_OE_USER_ROLES");

                    b.ToTable("T_OE_USER_ROLES");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TOeUsers", b =>
                {
                    b.Property<int>("UserIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("USER_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ActInd")
                        .HasColumnName("ACT_IND")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("DefaultOrgId")
                        .HasColumnName("DEFAULT_ORG_ID")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime>("EffectiveDt")
                        .HasColumnName("EFFECTIVE_DT")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Email")
                        .HasColumnName("EMAIL")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnName("FNAME")
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<bool>("InitalPwdFlag")
                        .HasColumnName("INITAL_PWD_FLAG")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastloginDt")
                        .HasColumnName("LASTLOGIN_DT")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnName("LNAME")
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifyDt")
                        .HasColumnName("MODIFY_DT")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("ModifyUserid")
                        .HasColumnName("MODIFY_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("PhoneExt")
                        .HasColumnName("PHONE_EXT")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("PwdHash")
                        .IsRequired()
                        .HasColumnName("PWD_HASH")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PwdSalt")
                        .IsRequired()
                        .HasColumnName("PWD_SALT")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("USER_ID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("UserIdx");

                    b.ToTable("T_OE_USERS");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxActivity", b =>
                {
                    b.Property<int>("ActivityIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ACTIVITY_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActComment")
                        .HasColumnName("ACT_COMMENT")
                        .HasColumnType("varchar(4000)")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("ActDepthheightMsr")
                        .HasColumnName("ACT_DEPTHHEIGHT_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("ActDepthheightMsrUnit")
                        .HasColumnName("ACT_DEPTHHEIGHT_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ActEndDt")
                        .HasColumnName("ACT_END_DT")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ActInd")
                        .HasColumnName("ACT_IND")
                        .HasColumnType("bit");

                    b.Property<string>("ActMedia")
                        .IsRequired()
                        .HasColumnName("ACT_MEDIA")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("ActStartDt")
                        .HasColumnName("ACT_START_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("ActSubmedia")
                        .HasColumnName("ACT_SUBMEDIA")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("ActTimeZone")
                        .HasColumnName("ACT_TIME_ZONE")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("ActType")
                        .IsRequired()
                        .HasColumnName("ACT_TYPE")
                        .HasColumnType("varchar(70)")
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<string>("ActivityId")
                        .IsRequired()
                        .HasColumnName("ACTIVITY_ID")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<string>("BioAssemblageSampled")
                        .HasColumnName("BIO_ASSEMBLAGE_SAMPLED")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BioBoatSpeedMsr")
                        .HasColumnName("BIO_BOAT_SPEED_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioBoatSpeedMsrUnit")
                        .HasColumnName("BIO_BOAT_SPEED_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioCurrSpeedMsr")
                        .HasColumnName("BIO_CURR_SPEED_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioCurrSpeedMsrUnit")
                        .HasColumnName("BIO_CURR_SPEED_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioDurationMsr")
                        .HasColumnName("BIO_DURATION_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioDurationMsrUnit")
                        .HasColumnName("BIO_DURATION_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioMeshsizeMsrUnit")
                        .HasColumnName("BIO_MESHSIZE_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioNetAreaMsr")
                        .HasColumnName("BIO_NET_AREA_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioNetAreaMsrUnit")
                        .HasColumnName("BIO_NET_AREA_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioNetMeshsizeMsr")
                        .HasColumnName("BIO_NET_MESHSIZE_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioNetType")
                        .HasColumnName("BIO_NET_TYPE")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("BioPassCount")
                        .HasColumnName("BIO_PASS_COUNT")
                        .HasColumnType("int");

                    b.Property<string>("BioReachLenMsr")
                        .HasColumnName("BIO_REACH_LEN_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioReachLenMsrUnit")
                        .HasColumnName("BIO_REACH_LEN_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioReachWidMsr")
                        .HasColumnName("BIO_REACH_WID_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioReachWidMsrUnit")
                        .HasColumnName("BIO_REACH_WID_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioSampComponent")
                        .HasColumnName("BIO_SAMP_COMPONENT")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int?>("BioSampComponentSeq")
                        .HasColumnName("BIO_SAMP_COMPONENT_SEQ")
                        .HasColumnType("int");

                    b.Property<string>("BioToxicityTestType")
                        .HasColumnName("BIO_TOXICITY_TEST_TYPE")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<string>("BotDepthheightMsr")
                        .HasColumnName("BOT_DEPTHHEIGHT_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BotDepthheightMsrUnit")
                        .HasColumnName("BOT_DEPTHHEIGHT_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("DepthRefPoint")
                        .HasColumnName("DEPTH_REF_POINT")
                        .HasColumnType("varchar(125)")
                        .HasMaxLength(125)
                        .IsUnicode(false);

                    b.Property<string>("EntryType")
                        .HasColumnName("ENTRY_TYPE")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int?>("MonlocIdx")
                        .HasColumnName("MONLOC_IDX")
                        .HasColumnType("int");

                    b.Property<string>("OrgId")
                        .IsRequired()
                        .HasColumnName("ORG_ID")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int>("ProjectIdx")
                        .HasColumnName("PROJECT_IDX")
                        .HasColumnType("int");

                    b.Property<string>("RelativeDepthName")
                        .HasColumnName("RELATIVE_DEPTH_NAME")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("SampCollEquip")
                        .HasColumnName("SAMP_COLL_EQUIP")
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("SampCollEquipComment")
                        .HasColumnName("SAMP_COLL_EQUIP_COMMENT")
                        .HasColumnType("varchar(4000)")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<int?>("SampCollMethodIdx")
                        .HasColumnName("SAMP_COLL_METHOD_IDX")
                        .HasColumnType("int");

                    b.Property<string>("SampPrepChemPreserv")
                        .HasColumnName("SAMP_PREP_CHEM_PRESERV")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("SampPrepContColor")
                        .HasColumnName("SAMP_PREP_CONT_COLOR")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("SampPrepContType")
                        .HasColumnName("SAMP_PREP_CONT_TYPE")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<int?>("SampPrepIdx")
                        .HasColumnName("SAMP_PREP_IDX")
                        .HasColumnType("int");

                    b.Property<string>("SampPrepStorageDesc")
                        .HasColumnName("SAMP_PREP_STORAGE_DESC")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("SampPrepThermPreserv")
                        .HasColumnName("SAMP_PREP_THERM_PRESERV")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<int?>("TempSampleIdx")
                        .HasColumnName("TEMP_SAMPLE_IDX")
                        .HasColumnType("int");

                    b.Property<string>("TopDepthheightMsr")
                        .HasColumnName("TOP_DEPTHHEIGHT_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("TopDepthheightMsrUnit")
                        .HasColumnName("TOP_DEPTHHEIGHT_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDt")
                        .HasColumnName("UPDATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserid")
                        .HasColumnName("UPDATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<bool?>("WqxInd")
                        .HasColumnName("WQX_IND")
                        .HasColumnType("bit");

                    b.Property<string>("WqxSubmitStatus")
                        .HasColumnName("WQX_SUBMIT_STATUS")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("WqxUpdateDt")
                        .HasColumnName("WQX_UPDATE_DT")
                        .HasColumnType("datetime");

                    b.HasKey("ActivityIdx")
                        .HasName("PK_WQX_ACTIVITY");

                    b.HasIndex("MonlocIdx");

                    b.HasIndex("OrgId");

                    b.HasIndex("ProjectIdx");

                    b.ToTable("T_WQX_ACTIVITY");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxActivityMetric", b =>
                {
                    b.Property<int>("ActivityMetricIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ACTIVITY_METRIC_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("ActInd")
                        .HasColumnName("ACT_IND")
                        .HasColumnType("bit");

                    b.Property<int>("ActivityIdx")
                        .HasColumnName("ACTIVITY_IDX")
                        .HasColumnType("int");

                    b.Property<int?>("BioHabitatIndexIdx")
                        .HasColumnName("BIO_HABITAT_INDEX_IDX")
                        .HasColumnType("int");

                    b.Property<string>("CitationCreator")
                        .HasColumnName("CITATION_CREATOR")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CitationDate")
                        .HasColumnName("CITATION_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("CitationId")
                        .HasColumnName("CITATION_ID")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("CitationPublisher")
                        .HasColumnName("CITATION_PUBLISHER")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("CitationSubject")
                        .HasColumnName("CITATION_SUBJECT")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("CitationTitle")
                        .HasColumnName("CITATION_TITLE")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("MetricComment")
                        .HasColumnName("METRIC_COMMENT")
                        .HasColumnType("varchar(4000)")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("MetricFormulaDesc")
                        .HasColumnName("METRIC_FORMULA_DESC")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MetricScale")
                        .HasColumnName("METRIC_SCALE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MetricScore")
                        .IsRequired()
                        .HasColumnName("METRIC_SCORE")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("MetricTypeId")
                        .IsRequired()
                        .HasColumnName("METRIC_TYPE_ID")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<string>("MetricTypeIdContext")
                        .IsRequired()
                        .HasColumnName("METRIC_TYPE_ID_CONTEXT")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MetricTypeName")
                        .HasColumnName("METRIC_TYPE_NAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MetricValueMsr")
                        .HasColumnName("METRIC_VALUE_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("MetricValueMsrUnit")
                        .HasColumnName("METRIC_VALUE_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDt")
                        .HasColumnName("UPDATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserid")
                        .HasColumnName("UPDATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<bool?>("WqxInd")
                        .HasColumnName("WQX_IND")
                        .HasColumnType("bit");

                    b.Property<string>("WqxSubmitStatus")
                        .HasColumnName("WQX_SUBMIT_STATUS")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("WqxUpdateDt")
                        .HasColumnName("WQX_UPDATE_DT")
                        .HasColumnType("datetime");

                    b.HasKey("ActivityMetricIdx")
                        .HasName("PK_WQX_ACTIVITYMETRIC");

                    b.HasIndex("ActivityIdx");

                    b.HasIndex("BioHabitatIndexIdx");

                    b.ToTable("T_WQX_ACTIVITY_METRIC");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxBioHabitatIndex", b =>
                {
                    b.Property<int>("BioHabitatIndexIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BIO_HABITAT_INDEX_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("ActInd")
                        .HasColumnName("ACT_IND")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<DateTime?>("IndexCalcDate")
                        .HasColumnName("INDEX_CALC_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("IndexComment")
                        .HasColumnName("INDEX_COMMENT")
                        .HasColumnType("varchar(4000)")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("IndexId")
                        .IsRequired()
                        .HasColumnName("INDEX_ID")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<string>("IndexQualCd")
                        .HasColumnName("INDEX_QUAL_CD")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("IndexScore")
                        .IsRequired()
                        .HasColumnName("INDEX_SCORE")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("IndexTypeId")
                        .IsRequired()
                        .HasColumnName("INDEX_TYPE_ID")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<string>("IndexTypeIdContext")
                        .IsRequired()
                        .HasColumnName("INDEX_TYPE_ID_CONTEXT")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IndexTypeName")
                        .IsRequired()
                        .HasColumnName("INDEX_TYPE_NAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IndexTypeScale")
                        .HasColumnName("INDEX_TYPE_SCALE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("MonlocIdx")
                        .HasColumnName("MONLOC_IDX")
                        .HasColumnType("int");

                    b.Property<string>("OrgId")
                        .IsRequired()
                        .HasColumnName("ORG_ID")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ResourceCreator")
                        .HasColumnName("RESOURCE_CREATOR")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ResourceDate")
                        .HasColumnName("RESOURCE_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("ResourceId")
                        .HasColumnName("RESOURCE_ID")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ResourcePublisher")
                        .HasColumnName("RESOURCE_PUBLISHER")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("ResourceSubject")
                        .HasColumnName("RESOURCE_SUBJECT")
                        .HasColumnType("varchar(400)")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<string>("ResourceTitle")
                        .HasColumnName("RESOURCE_TITLE")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDt")
                        .HasColumnName("UPDATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserid")
                        .HasColumnName("UPDATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<bool?>("WqxInd")
                        .HasColumnName("WQX_IND")
                        .HasColumnType("bit");

                    b.Property<string>("WqxSubmitStatus")
                        .HasColumnName("WQX_SUBMIT_STATUS")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("WqxUpdateDt")
                        .HasColumnName("WQX_UPDATE_DT")
                        .HasColumnType("datetime");

                    b.HasKey("BioHabitatIndexIdx");

                    b.HasIndex("MonlocIdx");

                    b.HasIndex("OrgId");

                    b.ToTable("T_WQX_BIO_HABITAT_INDEX");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxImportLog", b =>
                {
                    b.Property<int>("ImportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IMPORT_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("FILE_NAME")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int>("FileSize")
                        .HasColumnName("FILE_SIZE")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImportFile")
                        .HasColumnName("IMPORT_FILE")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImportProgress")
                        .HasColumnName("IMPORT_PROGRESS")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ImportProgressMsg")
                        .HasColumnName("IMPORT_PROGRESS_MSG")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("ImportStatus")
                        .HasColumnName("IMPORT_STATUS")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("OrgId")
                        .IsRequired()
                        .HasColumnName("ORG_ID")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("TypeCd")
                        .IsRequired()
                        .HasColumnName("TYPE_CD")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.HasKey("ImportId")
                        .HasName("PK_WQX_IMPORT_LOG");

                    b.HasIndex("OrgId");

                    b.ToTable("T_WQX_IMPORT_LOG");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxImportTempActivityMetric", b =>
                {
                    b.Property<int>("TempActivityMetricIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TEMP_ACTIVITY_METRIC_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivityId")
                        .HasColumnName("ACTIVITY_ID")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<int?>("ActivityIdx")
                        .HasColumnName("ACTIVITY_IDX")
                        .HasColumnType("int");

                    b.Property<string>("ImportStatusCd")
                        .HasColumnName("IMPORT_STATUS_CD")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("ImportStatusDesc")
                        .HasColumnName("IMPORT_STATUS_DESC")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("MetricComment")
                        .HasColumnName("METRIC_COMMENT")
                        .HasColumnType("varchar(4000)")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("MetricFormulaDesc")
                        .HasColumnName("METRIC_FORMULA_DESC")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MetricScale")
                        .HasColumnName("METRIC_SCALE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MetricScore")
                        .IsRequired()
                        .HasColumnName("METRIC_SCORE")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("MetricTypeId")
                        .IsRequired()
                        .HasColumnName("METRIC_TYPE_ID")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<string>("MetricTypeIdContext")
                        .IsRequired()
                        .HasColumnName("METRIC_TYPE_ID_CONTEXT")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MetricTypeName")
                        .HasColumnName("METRIC_TYPE_NAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MetricValueMsr")
                        .HasColumnName("METRIC_VALUE_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("MetricValueMsrUnit")
                        .HasColumnName("METRIC_VALUE_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("OrgId")
                        .IsRequired()
                        .HasColumnName("ORG_ID")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("TempBioHabitatIndexIdx")
                        .HasColumnName("TEMP_BIO_HABITAT_INDEX_IDX")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("USER_ID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("TempActivityMetricIdx")
                        .HasName("PK_T_IMPORT_TEMP_ACTIVITY_METRIC");

                    b.ToTable("T_WQX_IMPORT_TEMP_ACTIVITY_METRIC");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxImportTempBioIndex", b =>
                {
                    b.Property<int>("TempBioHabitatIndexIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TEMP_BIO_HABITAT_INDEX_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImportStatusCd")
                        .HasColumnName("IMPORT_STATUS_CD")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("ImportStatusDesc")
                        .HasColumnName("IMPORT_STATUS_DESC")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("IndexCalcDate")
                        .HasColumnName("INDEX_CALC_DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("IndexComment")
                        .HasColumnName("INDEX_COMMENT")
                        .HasColumnType("varchar(4000)")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("IndexId")
                        .HasColumnName("INDEX_ID")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<string>("IndexQualCd")
                        .HasColumnName("INDEX_QUAL_CD")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("IndexScore")
                        .IsRequired()
                        .HasColumnName("INDEX_SCORE")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("IndexTypeId")
                        .HasColumnName("INDEX_TYPE_ID")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<string>("IndexTypeIdContext")
                        .HasColumnName("INDEX_TYPE_ID_CONTEXT")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IndexTypeName")
                        .IsRequired()
                        .HasColumnName("INDEX_TYPE_NAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IndexTypeScale")
                        .HasColumnName("INDEX_TYPE_SCALE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("MonlocIdx")
                        .HasColumnName("MONLOC_IDX")
                        .HasColumnType("int");

                    b.Property<string>("OrgId")
                        .IsRequired()
                        .HasColumnName("ORG_ID")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("USER_ID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("TempBioHabitatIndexIdx")
                        .HasName("PK_T_IMPORT_TEMP_BIO_INDEX");

                    b.ToTable("T_WQX_IMPORT_TEMP_BIO_INDEX");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxImportTempMonloc", b =>
                {
                    b.Property<int>("TempMonlocIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TEMP_MONLOC_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AquiferName")
                        .HasColumnName("AQUIFER_NAME")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<string>("CountryCode")
                        .HasColumnName("COUNTRY_CODE")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("CountyCode")
                        .HasColumnName("COUNTY_CODE")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("FormationType")
                        .HasColumnName("FORMATION_TYPE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("HorizAccuracy")
                        .HasColumnName("HORIZ_ACCURACY")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("HorizAccuracyUnit")
                        .HasColumnName("HORIZ_ACCURACY_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("HorizCollMethod")
                        .HasColumnName("HORIZ_COLL_METHOD")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("HorizRefDatum")
                        .HasColumnName("HORIZ_REF_DATUM")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("HucEight")
                        .HasColumnName("HUC_EIGHT")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("HucTwelve")
                        .HasColumnName("HUC_TWELVE")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("ImportStatusCd")
                        .HasColumnName("IMPORT_STATUS_CD")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("ImportStatusDesc")
                        .HasColumnName("IMPORT_STATUS_DESC")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("LatitudeMsr")
                        .IsRequired()
                        .HasColumnName("LATITUDE_MSR")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("LongitudeMsr")
                        .IsRequired()
                        .HasColumnName("LONGITUDE_MSR")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("MonlocDesc")
                        .HasColumnName("MONLOC_DESC")
                        .HasColumnType("varchar(1999)")
                        .HasMaxLength(1999)
                        .IsUnicode(false);

                    b.Property<string>("MonlocId")
                        .HasColumnName("MONLOC_ID")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<int?>("MonlocIdx")
                        .HasColumnName("MONLOC_IDX")
                        .HasColumnType("int");

                    b.Property<string>("MonlocName")
                        .HasColumnName("MONLOC_NAME")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("MonlocType")
                        .HasColumnName("MONLOC_TYPE")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("OrgId")
                        .HasColumnName("ORG_ID")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("SourceMapScale")
                        .HasColumnName("SOURCE_MAP_SCALE")
                        .HasColumnType("int");

                    b.Property<string>("StateCode")
                        .HasColumnName("STATE_CODE")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("TribalLandInd")
                        .HasColumnName("TRIBAL_LAND_IND")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("TribalLandName")
                        .HasColumnName("TRIBAL_LAND_NAME")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("USER_ID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("VertCollMethod")
                        .HasColumnName("VERT_COLL_METHOD")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("VertMeasure")
                        .HasColumnName("VERT_MEASURE")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("VertMeasureUnit")
                        .HasColumnName("VERT_MEASURE_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("VertRefDatum")
                        .HasColumnName("VERT_REF_DATUM")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("WellType")
                        .HasColumnName("WELL_TYPE")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("WellholeDepthMsr")
                        .HasColumnName("WELLHOLE_DEPTH_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("WellholeDepthMsrUnit")
                        .HasColumnName("WELLHOLE_DEPTH_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.HasKey("TempMonlocIdx")
                        .HasName("PK_WQX_IMPORT_TEMP_MONLOC");

                    b.ToTable("T_WQX_IMPORT_TEMP_MONLOC");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxImportTempProject", b =>
                {
                    b.Property<int>("TempProjectIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TEMP_PROJECT_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImportStatusCd")
                        .HasColumnName("IMPORT_STATUS_CD")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("ImportStatusDesc")
                        .HasColumnName("IMPORT_STATUS_DESC")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("OrgId")
                        .HasColumnName("ORG_ID")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ProjectDesc")
                        .HasColumnName("PROJECT_DESC")
                        .HasColumnType("varchar(1999)")
                        .HasMaxLength(1999)
                        .IsUnicode(false);

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnName("PROJECT_ID")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<int?>("ProjectIdx")
                        .HasColumnName("PROJECT_IDX")
                        .HasColumnType("int");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnName("PROJECT_NAME")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<string>("QappApprovalAgency")
                        .HasColumnName("QAPP_APPROVAL_AGENCY")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("QappApprovalInd")
                        .HasColumnName("QAPP_APPROVAL_IND")
                        .HasColumnType("bit");

                    b.Property<string>("SampDesignTypeCd")
                        .HasColumnName("SAMP_DESIGN_TYPE_CD")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("USER_ID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("TempProjectIdx")
                        .HasName("PK_WQX_IMPORT_TEMP_PROJECT");

                    b.ToTable("T_WQX_IMPORT_TEMP_PROJECT");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxImportTempResult", b =>
                {
                    b.Property<int>("TempResultIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TEMP_RESULT_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnalyticMethodCtx")
                        .HasColumnName("ANALYTIC_METHOD_CTX")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<string>("AnalyticMethodId")
                        .HasColumnName("ANALYTIC_METHOD_ID")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("AnalyticMethodIdx")
                        .HasColumnName("ANALYTIC_METHOD_IDX")
                        .HasColumnType("int");

                    b.Property<string>("AnalyticMethodName")
                        .HasColumnName("ANALYTIC_METHOD_NAME")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<string>("BiasValue")
                        .HasColumnName("BIAS_VALUE")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("BioIndividualId")
                        .HasColumnName("BIO_INDIVIDUAL_ID")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("BioIntentName")
                        .HasColumnName("BIO_INTENT_NAME")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<string>("BioSampleTissueAnatomy")
                        .HasColumnName("BIO_SAMPLE_TISSUE_ANATOMY")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("BioSubjectTaxonomy")
                        .HasColumnName("BIO_SUBJECT_TAXONOMY")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<string>("BioUnidentifiedSpeciesId")
                        .HasColumnName("BIO_UNIDENTIFIED_SPECIES_ID")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<string>("CharName")
                        .HasColumnName("CHAR_NAME")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<string>("ConfidenceIntervalValue")
                        .HasColumnName("CONFIDENCE_INTERVAL_VALUE")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("DataLoggerLine")
                        .HasColumnName("DATA_LOGGER_LINE")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("DepthHeightMsr")
                        .HasColumnName("DEPTH_HEIGHT_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("DepthHeightMsrUnit")
                        .HasColumnName("DEPTH_HEIGHT_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("Depthaltituderefpoint")
                        .HasColumnName("DEPTHALTITUDEREFPOINT")
                        .HasColumnType("varchar(125)")
                        .HasMaxLength(125)
                        .IsUnicode(false);

                    b.Property<string>("DetectionLimitUnit")
                        .HasColumnName("DETECTION_LIMIT_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("DilutionFactor")
                        .HasColumnName("DILUTION_FACTOR")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("FreqClassCode")
                        .HasColumnName("FREQ_CLASS_CODE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FreqClassLower")
                        .HasColumnName("FREQ_CLASS_LOWER")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("FreqClassUnit")
                        .HasColumnName("FREQ_CLASS_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("FreqClassUpper")
                        .HasColumnName("FREQ_CLASS_UPPER")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("GrpSummCountWeightMsr")
                        .HasColumnName("GRP_SUMM_COUNT_WEIGHT_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("GrpSummCountWeightMsrUnit")
                        .HasColumnName("GRP_SUMM_COUNT_WEIGHT_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("ImportStatusCd")
                        .HasColumnName("IMPORT_STATUS_CD")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("ImportStatusDesc")
                        .HasColumnName("IMPORT_STATUS_DESC")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LabAnalysisEndDt")
                        .HasColumnName("LAB_ANALYSIS_END_DT")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LabAnalysisStartDt")
                        .HasColumnName("LAB_ANALYSIS_START_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("LabAnalysisTimezone")
                        .HasColumnName("LAB_ANALYSIS_TIMEZONE")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<int?>("LabIdx")
                        .HasColumnName("LAB_IDX")
                        .HasColumnType("int");

                    b.Property<string>("LabName")
                        .HasColumnName("LAB_NAME")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("LabReportingLevel")
                        .HasColumnName("LAB_REPORTING_LEVEL")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("LabSampPrepCtx")
                        .HasColumnName("LAB_SAMP_PREP_CTX")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LabSampPrepEndDt")
                        .HasColumnName("LAB_SAMP_PREP_END_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("LabSampPrepId")
                        .HasColumnName("LAB_SAMP_PREP_ID")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("LabSampPrepIdx")
                        .HasColumnName("LAB_SAMP_PREP_IDX")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LabSampPrepStartDt")
                        .HasColumnName("LAB_SAMP_PREP_START_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("LowerConfidenceLimit")
                        .HasColumnName("LOWER_CONFIDENCE_LIMIT")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("LowerQuantLimit")
                        .HasColumnName("LOWER_QUANT_LIMIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("MethodDetectionLevel")
                        .HasColumnName("METHOD_DETECTION_LEVEL")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("MethodSpeciationName")
                        .HasColumnName("METHOD_SPECIATION_NAME")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ParticlesizeBasis")
                        .HasColumnName("PARTICLESIZE_BASIS")
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("Pql")
                        .HasColumnName("PQL")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("PrecisionValue")
                        .HasColumnName("PRECISION_VALUE")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("ResultComment")
                        .HasColumnName("RESULT_COMMENT")
                        .HasColumnType("varchar(4000)")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("ResultDetectCondition")
                        .HasColumnName("RESULT_DETECT_CONDITION")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<int?>("ResultIdx")
                        .HasColumnName("RESULT_IDX")
                        .HasColumnType("int");

                    b.Property<string>("ResultLabCommentCode")
                        .HasColumnName("RESULT_LAB_COMMENT_CODE")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("ResultMsr")
                        .HasColumnName("RESULT_MSR")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("ResultMsrQual")
                        .HasColumnName("RESULT_MSR_QUAL")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("ResultMsrUnit")
                        .HasColumnName("RESULT_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("ResultSampFraction")
                        .HasColumnName("RESULT_SAMP_FRACTION")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("ResultStatus")
                        .HasColumnName("RESULT_STATUS")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("ResultValueType")
                        .HasColumnName("RESULT_VALUE_TYPE")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("StatisticBaseCode")
                        .HasColumnName("STATISTIC_BASE_CODE")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("TaxDtlCellForm")
                        .HasColumnName("TAX_DTL_CELL_FORM")
                        .HasColumnType("varchar(11)")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<string>("TaxDtlCellShape")
                        .HasColumnName("TAX_DTL_CELL_SHAPE")
                        .HasColumnType("varchar(18)")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("TaxDtlFuncFeedingGroup1")
                        .HasColumnName("TAX_DTL_FUNC_FEEDING_GROUP1")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("TaxDtlFuncFeedingGroup2")
                        .HasColumnName("TAX_DTL_FUNC_FEEDING_GROUP2")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("TaxDtlFuncFeedingGroup3")
                        .HasColumnName("TAX_DTL_FUNC_FEEDING_GROUP3")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("TaxDtlHabit")
                        .HasColumnName("TAX_DTL_HABIT")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("TaxDtlPollTolerance")
                        .HasColumnName("TAX_DTL_POLL_TOLERANCE")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("TaxDtlPollToleranceScale")
                        .HasColumnName("TAX_DTL_POLL_TOLERANCE_SCALE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TaxDtlTrophicLevel")
                        .HasColumnName("TAX_DTL_TROPHIC_LEVEL")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("TaxDtlVoltinism")
                        .HasColumnName("TAX_DTL_VOLTINISM")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("TempBasis")
                        .HasColumnName("TEMP_BASIS")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<int>("TempSampleIdx")
                        .HasColumnName("TEMP_SAMPLE_IDX")
                        .HasColumnType("int");

                    b.Property<string>("TimeBasis")
                        .HasColumnName("TIME_BASIS")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("UpperConfidenceLimit")
                        .HasColumnName("UPPER_CONFIDENCE_LIMIT")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("UpperQuantLimit")
                        .HasColumnName("UPPER_QUANT_LIMIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("WeightBasis")
                        .HasColumnName("WEIGHT_BASIS")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("TempResultIdx")
                        .HasName("PK_WQX_IMPORT_TEMP_RESULT");

                    b.HasIndex("TempSampleIdx");

                    b.ToTable("T_WQX_IMPORT_TEMP_RESULT");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxImportTempSample", b =>
                {
                    b.Property<int>("TempSampleIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TEMP_SAMPLE_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActComment")
                        .HasColumnName("ACT_COMMENT")
                        .HasColumnType("varchar(4000)")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("ActDepthheightMsr")
                        .HasColumnName("ACT_DEPTHHEIGHT_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("ActDepthheightMsrUnit")
                        .HasColumnName("ACT_DEPTHHEIGHT_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ActEndDt")
                        .HasColumnName("ACT_END_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("ActMedia")
                        .IsRequired()
                        .HasColumnName("ACT_MEDIA")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ActStartDt")
                        .HasColumnName("ACT_START_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("ActSubmedia")
                        .HasColumnName("ACT_SUBMEDIA")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("ActTimeZone")
                        .HasColumnName("ACT_TIME_ZONE")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("ActType")
                        .IsRequired()
                        .HasColumnName("ACT_TYPE")
                        .HasColumnType("varchar(70)")
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<string>("ActivityId")
                        .HasColumnName("ACTIVITY_ID")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<int?>("ActivityIdx")
                        .HasColumnName("ACTIVITY_IDX")
                        .HasColumnType("int");

                    b.Property<string>("BioAssemblageSampled")
                        .HasColumnName("BIO_ASSEMBLAGE_SAMPLED")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BioBoatSpeedMsr")
                        .HasColumnName("BIO_BOAT_SPEED_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioBoatSpeedMsrUnit")
                        .HasColumnName("BIO_BOAT_SPEED_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioCurrSpeedMsr")
                        .HasColumnName("BIO_CURR_SPEED_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioCurrSpeedMsrUnit")
                        .HasColumnName("BIO_CURR_SPEED_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioDurationMsr")
                        .HasColumnName("BIO_DURATION_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioDurationMsrUnit")
                        .HasColumnName("BIO_DURATION_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioMeshsizeMsrUnit")
                        .HasColumnName("BIO_MESHSIZE_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioNetAreaMsr")
                        .HasColumnName("BIO_NET_AREA_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioNetAreaMsrUnit")
                        .HasColumnName("BIO_NET_AREA_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioNetMeshsizeMsr")
                        .HasColumnName("BIO_NET_MESHSIZE_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioNetType")
                        .HasColumnName("BIO_NET_TYPE")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("BioPassCount")
                        .HasColumnName("BIO_PASS_COUNT")
                        .HasColumnType("int");

                    b.Property<string>("BioReachLenMsr")
                        .HasColumnName("BIO_REACH_LEN_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioReachLenMsrUnit")
                        .HasColumnName("BIO_REACH_LEN_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioReachWidMsr")
                        .HasColumnName("BIO_REACH_WID_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioReachWidMsrUnit")
                        .HasColumnName("BIO_REACH_WID_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BioSampComponent")
                        .HasColumnName("BIO_SAMP_COMPONENT")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int?>("BioSampComponentSeq")
                        .HasColumnName("BIO_SAMP_COMPONENT_SEQ")
                        .HasColumnType("int");

                    b.Property<string>("BioToxicityTestType")
                        .HasColumnName("BIO_TOXICITY_TEST_TYPE")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<string>("BotDepthheightMsr")
                        .HasColumnName("BOT_DEPTHHEIGHT_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("BotDepthheightMsrUnit")
                        .HasColumnName("BOT_DEPTHHEIGHT_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("DepthRefPoint")
                        .HasColumnName("DEPTH_REF_POINT")
                        .HasColumnType("varchar(125)")
                        .HasMaxLength(125)
                        .IsUnicode(false);

                    b.Property<string>("ImportStatusCd")
                        .HasColumnName("IMPORT_STATUS_CD")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("ImportStatusDesc")
                        .HasColumnName("IMPORT_STATUS_DESC")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("MonlocId")
                        .HasColumnName("MONLOC_ID")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<int?>("MonlocIdx")
                        .HasColumnName("MONLOC_IDX")
                        .HasColumnType("int");

                    b.Property<string>("OrgId")
                        .HasColumnName("ORG_ID")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ProjectId")
                        .HasColumnName("PROJECT_ID")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<int?>("ProjectIdx")
                        .HasColumnName("PROJECT_IDX")
                        .HasColumnType("int");

                    b.Property<string>("RelativeDepthName")
                        .HasColumnName("RELATIVE_DEPTH_NAME")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("SampCollEquip")
                        .HasColumnName("SAMP_COLL_EQUIP")
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("SampCollEquipComment")
                        .HasColumnName("SAMP_COLL_EQUIP_COMMENT")
                        .HasColumnType("varchar(4000)")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("SampCollMethodCtx")
                        .HasColumnName("SAMP_COLL_METHOD_CTX")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<string>("SampCollMethodId")
                        .HasColumnName("SAMP_COLL_METHOD_ID")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("SampCollMethodIdx")
                        .HasColumnName("SAMP_COLL_METHOD_IDX")
                        .HasColumnType("int");

                    b.Property<string>("SampCollMethodName")
                        .HasColumnName("SAMP_COLL_METHOD_NAME")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<string>("SampPrepChemPreserv")
                        .HasColumnName("SAMP_PREP_CHEM_PRESERV")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("SampPrepContColor")
                        .HasColumnName("SAMP_PREP_CONT_COLOR")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("SampPrepContType")
                        .HasColumnName("SAMP_PREP_CONT_TYPE")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<string>("SampPrepCtx")
                        .HasColumnName("SAMP_PREP_CTX")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<string>("SampPrepId")
                        .HasColumnName("SAMP_PREP_ID")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("SampPrepIdx")
                        .HasColumnName("SAMP_PREP_IDX")
                        .HasColumnType("int");

                    b.Property<string>("SampPrepName")
                        .HasColumnName("SAMP_PREP_NAME")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<string>("SampPrepStorageDesc")
                        .HasColumnName("SAMP_PREP_STORAGE_DESC")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("SampPrepThermPreserv")
                        .HasColumnName("SAMP_PREP_THERM_PRESERV")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("TopDepthheightMsr")
                        .HasColumnName("TOP_DEPTHHEIGHT_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("TopDepthheightMsrUnit")
                        .HasColumnName("TOP_DEPTHHEIGHT_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("USER_ID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("TempSampleIdx")
                        .HasName("PK_WQX_IMPORT_TEMP_SAMPLE");

                    b.ToTable("T_WQX_IMPORT_TEMP_SAMPLE");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxImportTemplate", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TEMPLATE_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("OrgId")
                        .IsRequired()
                        .HasColumnName("ORG_ID")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnName("TEMPLATE_NAME")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("TypeCd")
                        .IsRequired()
                        .HasColumnName("TYPE_CD")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.HasKey("TemplateId")
                        .HasName("PK_WQX_IMPORT_TEMPLATE");

                    b.HasIndex("OrgId");

                    b.ToTable("T_WQX_IMPORT_TEMPLATE");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxImportTemplateDtl", b =>
                {
                    b.Property<int>("TemplateDtlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TEMPLATE_DTL_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CharDefaultSampFraction")
                        .HasColumnName("CHAR_DEFAULT_SAMP_FRACTION")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("CharDefaultUnit")
                        .HasColumnName("CHAR_DEFAULT_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("CharName")
                        .HasColumnName("CHAR_NAME")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<int>("ColNum")
                        .HasColumnName("COL_NUM")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("FieldMap")
                        .HasColumnName("FIELD_MAP")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("TemplateId")
                        .HasColumnName("TEMPLATE_ID")
                        .HasColumnType("int");

                    b.HasKey("TemplateDtlId")
                        .HasName("PK_WQX_IMPORT_TEMPLATE_DTL");

                    b.HasIndex("TemplateId");

                    b.ToTable("T_WQX_IMPORT_TEMPLATE_DTL");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxImportTranslate", b =>
                {
                    b.Property<int>("TranslateIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TRANSLATE_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColName")
                        .IsRequired()
                        .HasColumnName("COL_NAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("DataFrom")
                        .IsRequired()
                        .HasColumnName("DATA_FROM")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("DataTo")
                        .HasColumnName("DATA_TO")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("OrgId")
                        .IsRequired()
                        .HasColumnName("ORG_ID")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("TranslateIdx")
                        .HasName("PK_WQX_IMPORT_TRANSLATE");

                    b.HasIndex("OrgId");

                    b.ToTable("T_WQX_IMPORT_TRANSLATE");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxMonloc", b =>
                {
                    b.Property<int>("MonlocIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MONLOC_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("ActInd")
                        .HasColumnName("ACT_IND")
                        .HasColumnType("bit");

                    b.Property<string>("AquiferName")
                        .HasColumnName("AQUIFER_NAME")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<string>("CountryCode")
                        .HasColumnName("COUNTRY_CODE")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("CountyCode")
                        .HasColumnName("COUNTY_CODE")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("FormationType")
                        .HasColumnName("FORMATION_TYPE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("HorizAccuracy")
                        .HasColumnName("HORIZ_ACCURACY")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("HorizAccuracyUnit")
                        .HasColumnName("HORIZ_ACCURACY_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("HorizCollMethod")
                        .HasColumnName("HORIZ_COLL_METHOD")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("HorizRefDatum")
                        .HasColumnName("HORIZ_REF_DATUM")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("HucEight")
                        .HasColumnName("HUC_EIGHT")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("HucTwelve")
                        .HasColumnName("HUC_TWELVE")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("ImportMonlocId")
                        .HasColumnName("IMPORT_MONLOC_ID")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<string>("LatitudeMsr")
                        .IsRequired()
                        .HasColumnName("LATITUDE_MSR")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("LongitudeMsr")
                        .IsRequired()
                        .HasColumnName("LONGITUDE_MSR")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("MonlocDesc")
                        .HasColumnName("MONLOC_DESC")
                        .HasColumnType("varchar(1999)")
                        .HasMaxLength(1999)
                        .IsUnicode(false);

                    b.Property<string>("MonlocId")
                        .IsRequired()
                        .HasColumnName("MONLOC_ID")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<string>("MonlocName")
                        .IsRequired()
                        .HasColumnName("MONLOC_NAME")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("MonlocType")
                        .IsRequired()
                        .HasColumnName("MONLOC_TYPE")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("OrgId")
                        .IsRequired()
                        .HasColumnName("ORG_ID")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("SourceMapScale")
                        .HasColumnName("SOURCE_MAP_SCALE")
                        .HasColumnType("int");

                    b.Property<string>("StateCode")
                        .HasColumnName("STATE_CODE")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("TribalLandInd")
                        .HasColumnName("TRIBAL_LAND_IND")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("TribalLandName")
                        .HasColumnName("TRIBAL_LAND_NAME")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDt")
                        .HasColumnName("UPDATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserid")
                        .HasColumnName("UPDATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("VertCollMethod")
                        .HasColumnName("VERT_COLL_METHOD")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("VertMeasure")
                        .HasColumnName("VERT_MEASURE")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("VertMeasureUnit")
                        .HasColumnName("VERT_MEASURE_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("VertRefDatum")
                        .HasColumnName("VERT_REF_DATUM")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("WellType")
                        .HasColumnName("WELL_TYPE")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("WellholeDepthMsr")
                        .HasColumnName("WELLHOLE_DEPTH_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("WellholeDepthMsrUnit")
                        .HasColumnName("WELLHOLE_DEPTH_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<bool?>("WqxInd")
                        .HasColumnName("WQX_IND")
                        .HasColumnType("bit");

                    b.Property<string>("WqxSubmitStatus")
                        .HasColumnName("WQX_SUBMIT_STATUS")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("WqxUpdateDt")
                        .HasColumnName("WQX_UPDATE_DT")
                        .HasColumnType("datetime");

                    b.HasKey("MonlocIdx")
                        .HasName("PK_WQX_MONLOC");

                    b.HasIndex("OrgId");

                    b.ToTable("T_WQX_MONLOC");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxOrgAddress", b =>
                {
                    b.Property<string>("OrgId")
                        .HasColumnName("ORG_ID")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("AddressType")
                        .HasColumnName("ADDRESS_TYPE")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("ADDRESS")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CountryCd")
                        .HasColumnName("COUNTRY_CD")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("CountyCd")
                        .HasColumnName("COUNTY_CD")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Locality")
                        .HasColumnName("LOCALITY")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("PostalCd")
                        .HasColumnName("POSTAL_CD")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("StateCd")
                        .HasColumnName("STATE_CD")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("SuppAddress")
                        .HasColumnName("SUPP_ADDRESS")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDt")
                        .HasColumnName("UPDATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserid")
                        .HasColumnName("UPDATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("OrgId", "AddressType")
                        .HasName("PK_WQX_ORG_ADDRESS");

                    b.ToTable("T_WQX_ORG_ADDRESS");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxOrganization", b =>
                {
                    b.Property<string>("OrgId")
                        .HasColumnName("ORG_ID")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<bool?>("CdxSubmitInd")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CDX_SUBMIT_IND")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("CdxSubmitterId")
                        .HasColumnName("CDX_SUBMITTER_ID")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CdxSubmitterPwdHash")
                        .HasColumnName("CDX_SUBMITTER_PWD_HASH")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CdxSubmitterPwdSalt")
                        .HasColumnName("CDX_SUBMITTER_PWD_SALT")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("DefaultTimezone")
                        .HasColumnName("DEFAULT_TIMEZONE")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Electronicaddress")
                        .IsRequired()
                        .HasColumnName("ELECTRONICADDRESS")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<string>("Electronicaddresstype")
                        .HasColumnName("ELECTRONICADDRESSTYPE")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("MailingAddCity")
                        .HasColumnName("MAILING_ADD_CITY")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("MailingAddState")
                        .HasColumnName("MAILING_ADD_STATE")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("MailingAddZip")
                        .HasColumnName("MAILING_ADD_ZIP")
                        .HasColumnType("varchar(14)")
                        .HasMaxLength(14)
                        .IsUnicode(false);

                    b.Property<string>("MailingAddress")
                        .HasColumnName("MAILING_ADDRESS")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("MailingAddress2")
                        .HasColumnName("MAILING_ADDRESS2")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("OrgDesc")
                        .HasColumnName("ORG_DESC")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("OrgFormalName")
                        .IsRequired()
                        .HasColumnName("ORG_FORMAL_NAME")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<string>("TelephoneExt")
                        .HasColumnName("TELEPHONE_EXT")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("TelephoneNum")
                        .IsRequired()
                        .HasColumnName("TELEPHONE_NUM")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("TelephoneNumType")
                        .HasColumnName("TELEPHONE_NUM_TYPE")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("TribalCode")
                        .HasColumnName("TRIBAL_CODE")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDt")
                        .HasColumnName("UPDATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserid")
                        .HasColumnName("UPDATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("OrgId")
                        .HasName("PK_WQX_ORGANIZATION");

                    b.ToTable("T_WQX_ORGANIZATION");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxProject", b =>
                {
                    b.Property<int>("ProjectIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PROJECT_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("ActInd")
                        .HasColumnName("ACT_IND")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("OrgId")
                        .IsRequired()
                        .HasColumnName("ORG_ID")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ProjectDesc")
                        .HasColumnName("PROJECT_DESC")
                        .HasColumnType("varchar(1999)")
                        .HasMaxLength(1999)
                        .IsUnicode(false);

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnName("PROJECT_ID")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnName("PROJECT_NAME")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<string>("QappApprovalAgency")
                        .HasColumnName("QAPP_APPROVAL_AGENCY")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("QappApprovalInd")
                        .HasColumnName("QAPP_APPROVAL_IND")
                        .HasColumnType("bit");

                    b.Property<string>("SampDesignTypeCd")
                        .HasColumnName("SAMP_DESIGN_TYPE_CD")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDt")
                        .HasColumnName("UPDATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserid")
                        .HasColumnName("UPDATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<bool?>("WqxInd")
                        .HasColumnName("WQX_IND")
                        .HasColumnType("bit");

                    b.Property<string>("WqxSubmitStatus")
                        .HasColumnName("WQX_SUBMIT_STATUS")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("WqxUpdateDt")
                        .HasColumnName("WQX_UPDATE_DT")
                        .HasColumnType("datetime");

                    b.HasKey("ProjectIdx")
                        .HasName("PK_WQX_PROJECT");

                    b.HasIndex("OrgId");

                    b.ToTable("T_WQX_PROJECT");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxRefAnalMethod", b =>
                {
                    b.Property<int>("AnalyticMethodIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ANALYTIC_METHOD_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("ActInd")
                        .HasColumnName("ACT_IND")
                        .HasColumnType("bit");

                    b.Property<string>("AnalyticMethodCtx")
                        .IsRequired()
                        .HasColumnName("ANALYTIC_METHOD_CTX")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<string>("AnalyticMethodDesc")
                        .HasColumnName("ANALYTIC_METHOD_DESC")
                        .HasColumnType("varchar(4000)")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("AnalyticMethodId")
                        .IsRequired()
                        .HasColumnName("ANALYTIC_METHOD_ID")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("AnalyticMethodName")
                        .HasColumnName("ANALYTIC_METHOD_NAME")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDt")
                        .HasColumnName("UPDATE_DT")
                        .HasColumnType("datetime");

                    b.HasKey("AnalyticMethodIdx")
                        .HasName("PK_WQX_REF_ANAL_METHOD");

                    b.ToTable("T_WQX_REF_ANAL_METHOD");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxRefCharLimits", b =>
                {
                    b.Property<string>("CharName")
                        .HasColumnName("CHAR_NAME")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<string>("UnitName")
                        .HasColumnName("UNIT_NAME")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<bool?>("ActInd")
                        .HasColumnName("ACT_IND")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<decimal?>("LowerBound")
                        .HasColumnName("LOWER_BOUND")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime?>("UpdateDt")
                        .HasColumnName("UPDATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserid")
                        .HasColumnName("UPDATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<decimal?>("UpperBound")
                        .HasColumnName("UPPER_BOUND")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("CharName", "UnitName");

                    b.ToTable("T_WQX_REF_CHAR_LIMITS");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxRefCharOrg", b =>
                {
                    b.Property<string>("OrgId")
                        .HasColumnName("ORG_ID")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("CharName")
                        .HasColumnName("CHAR_NAME")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<int?>("DefaultAnalMethodIdx")
                        .HasColumnName("DEFAULT_ANAL_METHOD_IDX")
                        .HasColumnType("int");

                    b.Property<string>("DefaultDetectLimit")
                        .HasColumnName("DEFAULT_DETECT_LIMIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("DefaultLowerQuantLimit")
                        .HasColumnName("DEFAULT_LOWER_QUANT_LIMIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("DefaultResultStatus")
                        .HasColumnName("DEFAULT_RESULT_STATUS")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("DefaultResultValueType")
                        .HasColumnName("DEFAULT_RESULT_VALUE_TYPE")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("DefaultSampFraction")
                        .HasColumnName("DEFAULT_SAMP_FRACTION")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("DefaultUnit")
                        .HasColumnName("DEFAULT_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("DefaultUpperQuantLimit")
                        .HasColumnName("DEFAULT_UPPER_QUANT_LIMIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.HasKey("OrgId", "CharName");

                    b.HasIndex("CharName");

                    b.HasIndex("DefaultAnalMethodIdx");

                    b.ToTable("T_WQX_REF_CHAR_ORG");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxRefCharacteristic", b =>
                {
                    b.Property<string>("CharName")
                        .HasColumnName("CHAR_NAME")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<bool?>("ActInd")
                        .HasColumnName("ACT_IND")
                        .HasColumnType("bit");

                    b.Property<decimal?>("DefaultDetectLimit")
                        .HasColumnName("DEFAULT_DETECT_LIMIT")
                        .HasColumnType("decimal(12, 5)");

                    b.Property<string>("DefaultUnit")
                        .HasColumnName("DEFAULT_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("PickList")
                        .HasColumnName("PICK_LIST")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("SampFracReq")
                        .HasColumnName("SAMP_FRAC_REQ")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDt")
                        .HasColumnName("UPDATE_DT")
                        .HasColumnType("datetime");

                    b.Property<bool?>("UsedInd")
                        .HasColumnName("USED_IND")
                        .HasColumnType("bit");

                    b.HasKey("CharName");

                    b.ToTable("T_WQX_REF_CHARACTERISTIC");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxRefCounty", b =>
                {
                    b.Property<string>("StateCode")
                        .HasColumnName("STATE_CODE")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("CountyCode")
                        .HasColumnName("COUNTY_CODE")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<bool?>("ActInd")
                        .HasColumnName("ACT_IND")
                        .HasColumnType("bit");

                    b.Property<string>("CountyName")
                        .IsRequired()
                        .HasColumnName("COUNTY_NAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDt")
                        .HasColumnName("UPDATE_DT")
                        .HasColumnType("datetime");

                    b.Property<bool?>("UsedInd")
                        .HasColumnName("USED_IND")
                        .HasColumnType("bit");

                    b.HasKey("StateCode", "CountyCode")
                        .HasName("PK_WQX_REF_COUNTY");

                    b.ToTable("T_WQX_REF_COUNTY");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxRefData", b =>
                {
                    b.Property<int>("RefDataIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REF_DATA_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("ActInd")
                        .HasColumnName("ACT_IND")
                        .HasColumnType("bit");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnName("TABLE")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnName("TEXT")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDt")
                        .HasColumnName("UPDATE_DT")
                        .HasColumnType("datetime");

                    b.Property<bool?>("UsedInd")
                        .HasColumnName("USED_IND")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("VALUE")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("RefDataIdx")
                        .HasName("PK_WQX_REF_DATA");

                    b.ToTable("T_WQX_REF_DATA");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxRefDefaultTimeZone", b =>
                {
                    b.Property<string>("TimeZoneName")
                        .HasColumnName("TIME_ZONE_NAME")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<bool?>("ActInd")
                        .HasColumnName("ACT_IND")
                        .HasColumnType("bit");

                    b.Property<string>("OfficialTimeZoneName")
                        .HasColumnName("OFFICIAL_TIME_ZONE_NAME")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDt")
                        .HasColumnName("UPDATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserid")
                        .HasColumnName("UPDATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("WqxCodeDaylight")
                        .HasColumnName("WQX_CODE_DAYLIGHT")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("WqxCodeStandard")
                        .IsRequired()
                        .HasColumnName("WQX_CODE_STANDARD")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.HasKey("TimeZoneName")
                        .HasName("PK_WQX_REF_DEFAULT_TIME_ZONE");

                    b.ToTable("T_WQX_REF_DEFAULT_TIME_ZONE");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxRefLab", b =>
                {
                    b.Property<int>("LabIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LAB_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("ActInd")
                        .HasColumnName("ACT_IND")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("LabAccredAuthority")
                        .HasColumnName("LAB_ACCRED_AUTHORITY")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("LabAccredInd")
                        .HasColumnName("LAB_ACCRED_IND")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("LabName")
                        .IsRequired()
                        .HasColumnName("LAB_NAME")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("OrgId")
                        .IsRequired()
                        .HasColumnName("ORG_ID")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDt")
                        .HasColumnName("UPDATE_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserid")
                        .HasColumnName("UPDATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("LabIdx")
                        .HasName("PK_WQX_REF_LAB");

                    b.ToTable("T_WQX_REF_LAB");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxRefSampColMethod", b =>
                {
                    b.Property<int>("SampCollMethodIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SAMP_COLL_METHOD_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("ActInd")
                        .HasColumnName("ACT_IND")
                        .HasColumnType("bit");

                    b.Property<string>("SampCollMethodCtx")
                        .IsRequired()
                        .HasColumnName("SAMP_COLL_METHOD_CTX")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<string>("SampCollMethodDesc")
                        .HasColumnName("SAMP_COLL_METHOD_DESC")
                        .HasColumnType("varchar(4000)")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("SampCollMethodId")
                        .IsRequired()
                        .HasColumnName("SAMP_COLL_METHOD_ID")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("SampCollMethodName")
                        .HasColumnName("SAMP_COLL_METHOD_NAME")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDt")
                        .HasColumnName("UPDATE_DT")
                        .HasColumnType("datetime");

                    b.HasKey("SampCollMethodIdx")
                        .HasName("PK_WQX_REF_SAMP_COL_METHOD");

                    b.ToTable("T_WQX_REF_SAMP_COL_METHOD");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxRefSampPrep", b =>
                {
                    b.Property<int>("SampPrepIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SAMP_PREP_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("ActInd")
                        .HasColumnName("ACT_IND")
                        .HasColumnType("bit");

                    b.Property<string>("SampPrepMethodCtx")
                        .IsRequired()
                        .HasColumnName("SAMP_PREP_METHOD_CTX")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<string>("SampPrepMethodDesc")
                        .HasColumnName("SAMP_PREP_METHOD_DESC")
                        .HasColumnType("varchar(4000)")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("SampPrepMethodId")
                        .IsRequired()
                        .HasColumnName("SAMP_PREP_METHOD_ID")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("SampPrepMethodName")
                        .HasColumnName("SAMP_PREP_METHOD_NAME")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDt")
                        .HasColumnName("UPDATE_DT")
                        .HasColumnType("datetime");

                    b.HasKey("SampPrepIdx")
                        .HasName("PK_WQX_REF_SAMP_PREP");

                    b.ToTable("T_WQX_REF_SAMP_PREP");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxRefTaxaOrg", b =>
                {
                    b.Property<string>("OrgId")
                        .HasColumnName("ORG_ID")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("BioSubjectTaxonomy")
                        .HasColumnName("BIO_SUBJECT_TAXONOMY")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("OrgId", "BioSubjectTaxonomy");

                    b.ToTable("T_WQX_REF_TAXA_ORG");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxResult", b =>
                {
                    b.Property<int>("ResultIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RESULT_IDX")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityIdx")
                        .HasColumnName("ACTIVITY_IDX")
                        .HasColumnType("int");

                    b.Property<int?>("AnalyticMethodIdx")
                        .HasColumnName("ANALYTIC_METHOD_IDX")
                        .HasColumnType("int");

                    b.Property<string>("BiasValue")
                        .HasColumnName("BIAS_VALUE")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("BioIndividualId")
                        .HasColumnName("BIO_INDIVIDUAL_ID")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("BioIntentName")
                        .HasColumnName("BIO_INTENT_NAME")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<string>("BioSampleTissueAnatomy")
                        .HasColumnName("BIO_SAMPLE_TISSUE_ANATOMY")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("BioSubjectTaxonomy")
                        .HasColumnName("BIO_SUBJECT_TAXONOMY")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<string>("BioUnidentifiedSpeciesId")
                        .HasColumnName("BIO_UNIDENTIFIED_SPECIES_ID")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<string>("CharName")
                        .HasColumnName("CHAR_NAME")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<string>("ConfidenceIntervalValue")
                        .HasColumnName("CONFIDENCE_INTERVAL_VALUE")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("DataLoggerLine")
                        .HasColumnName("DATA_LOGGER_LINE")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("DepthHeightMsr")
                        .HasColumnName("DEPTH_HEIGHT_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("DepthHeightMsrUnit")
                        .HasColumnName("DEPTH_HEIGHT_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("Depthaltituderefpoint")
                        .HasColumnName("DEPTHALTITUDEREFPOINT")
                        .HasColumnType("varchar(125)")
                        .HasMaxLength(125)
                        .IsUnicode(false);

                    b.Property<string>("DetectionLimit")
                        .HasColumnName("DETECTION_LIMIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("DetectionLimitType")
                        .HasColumnName("DETECTION_LIMIT_TYPE")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<string>("DetectionLimitUnit")
                        .HasColumnName("DETECTION_LIMIT_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("DilutionFactor")
                        .HasColumnName("DILUTION_FACTOR")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("FreqClassCode")
                        .HasColumnName("FREQ_CLASS_CODE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FreqClassLower")
                        .HasColumnName("FREQ_CLASS_LOWER")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("FreqClassUnit")
                        .HasColumnName("FREQ_CLASS_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("FreqClassUpper")
                        .HasColumnName("FREQ_CLASS_UPPER")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("GrpSummCountWeightMsr")
                        .HasColumnName("GRP_SUMM_COUNT_WEIGHT_MSR")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("GrpSummCountWeightMsrUnit")
                        .HasColumnName("GRP_SUMM_COUNT_WEIGHT_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LabAnalysisEndDt")
                        .HasColumnName("LAB_ANALYSIS_END_DT")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LabAnalysisStartDt")
                        .HasColumnName("LAB_ANALYSIS_START_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("LabAnalysisTimezone")
                        .HasColumnName("LAB_ANALYSIS_TIMEZONE")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<int?>("LabIdx")
                        .HasColumnName("LAB_IDX")
                        .HasColumnType("int");

                    b.Property<string>("LabReportingLevel")
                        .HasColumnName("LAB_REPORTING_LEVEL")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LabSampPrepEndDt")
                        .HasColumnName("LAB_SAMP_PREP_END_DT")
                        .HasColumnType("datetime");

                    b.Property<int?>("LabSampPrepIdx")
                        .HasColumnName("LAB_SAMP_PREP_IDX")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LabSampPrepStartDt")
                        .HasColumnName("LAB_SAMP_PREP_START_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("LabTaxonAccredAuthority")
                        .HasColumnName("LAB_TAXON_ACCRED_AUTHORITY")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("LabTaxonAccredInd")
                        .HasColumnName("LAB_TAXON_ACCRED_IND")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("LowerConfidenceLimit")
                        .HasColumnName("LOWER_CONFIDENCE_LIMIT")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("LowerQuantLimit")
                        .HasColumnName("LOWER_QUANT_LIMIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("MethodSpeciationName")
                        .HasColumnName("METHOD_SPECIATION_NAME")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ParticlesizeBasis")
                        .HasColumnName("PARTICLESIZE_BASIS")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("Pql")
                        .HasColumnName("PQL")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("PrecisionValue")
                        .HasColumnName("PRECISION_VALUE")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("ResultComment")
                        .HasColumnName("RESULT_COMMENT")
                        .HasColumnType("varchar(4000)")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("ResultDetectCondition")
                        .HasColumnName("RESULT_DETECT_CONDITION")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<string>("ResultLabCommentCode")
                        .HasColumnName("RESULT_LAB_COMMENT_CODE")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("ResultMsr")
                        .HasColumnName("RESULT_MSR")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("ResultMsrQual")
                        .HasColumnName("RESULT_MSR_QUAL")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("ResultMsrUnit")
                        .HasColumnName("RESULT_MSR_UNIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("ResultSampFraction")
                        .HasColumnName("RESULT_SAMP_FRACTION")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("ResultSampPoint")
                        .HasColumnName("RESULT_SAMP_POINT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("ResultStatus")
                        .HasColumnName("RESULT_STATUS")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("ResultValueType")
                        .HasColumnName("RESULT_VALUE_TYPE")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("StatisticBaseCode")
                        .HasColumnName("STATISTIC_BASE_CODE")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("TaxDtlCellForm")
                        .HasColumnName("TAX_DTL_CELL_FORM")
                        .HasColumnType("varchar(11)")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<string>("TaxDtlCellShape")
                        .HasColumnName("TAX_DTL_CELL_SHAPE")
                        .HasColumnType("varchar(18)")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("TaxDtlFuncFeedingGroup1")
                        .HasColumnName("TAX_DTL_FUNC_FEEDING_GROUP1")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("TaxDtlFuncFeedingGroup2")
                        .HasColumnName("TAX_DTL_FUNC_FEEDING_GROUP2")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("TaxDtlFuncFeedingGroup3")
                        .HasColumnName("TAX_DTL_FUNC_FEEDING_GROUP3")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("TaxDtlHabit")
                        .HasColumnName("TAX_DTL_HABIT")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("TaxDtlPollTolerance")
                        .HasColumnName("TAX_DTL_POLL_TOLERANCE")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("TaxDtlPollToleranceScale")
                        .HasColumnName("TAX_DTL_POLL_TOLERANCE_SCALE")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TaxDtlTrophicLevel")
                        .HasColumnName("TAX_DTL_TROPHIC_LEVEL")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("TaxDtlVoltinism")
                        .HasColumnName("TAX_DTL_VOLTINISM")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("TempBasis")
                        .HasColumnName("TEMP_BASIS")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("TimeBasis")
                        .HasColumnName("TIME_BASIS")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("UpperConfidenceLimit")
                        .HasColumnName("UPPER_CONFIDENCE_LIMIT")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("UpperQuantLimit")
                        .HasColumnName("UPPER_QUANT_LIMIT")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("WeightBasis")
                        .HasColumnName("WEIGHT_BASIS")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("ResultIdx")
                        .HasName("PK_WQX_RESULT");

                    b.HasIndex("ActivityIdx");

                    b.HasIndex("AnalyticMethodIdx");

                    b.HasIndex("LabIdx");

                    b.ToTable("T_WQX_RESULT");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxTransactionLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LOG_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdxSubmitStatus")
                        .HasColumnName("CDX_SUBMIT_STATUS")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("CdxSubmitTransid")
                        .HasColumnName("CDX_SUBMIT_TRANSID")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("OrgId")
                        .HasColumnName("ORG_ID")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<byte[]>("ResponseFile")
                        .HasColumnName("RESPONSE_FILE")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ResponseTxt")
                        .HasColumnName("RESPONSE_TXT")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime>("SubmitDt")
                        .HasColumnName("SUBMIT_DT")
                        .HasColumnType("datetime");

                    b.Property<string>("SubmitType")
                        .IsRequired()
                        .HasColumnName("SUBMIT_TYPE")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("TableCd")
                        .IsRequired()
                        .HasColumnName("TABLE_CD")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<int>("TableIdx")
                        .HasColumnName("TABLE_IDX")
                        .HasColumnType("int");

                    b.HasKey("LogId")
                        .HasName("PK_WQX_TRANSACTION_LOG");

                    b.ToTable("T_WQX_TRANSACTION_LOG");
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxUserOrgs", b =>
                {
                    b.Property<int>("UserIdx")
                        .HasColumnName("USER_IDX")
                        .HasColumnType("int");

                    b.Property<string>("OrgId")
                        .HasColumnName("ORG_ID")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDt")
                        .HasColumnName("CREATE_DT")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("CreateUserid")
                        .HasColumnName("CREATE_USERID")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("RoleCd")
                        .HasColumnName("ROLE_CD")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.HasKey("UserIdx", "OrgId")
                        .HasName("PK_T_OE_USER_ORGS");

                    b.HasIndex("OrgId");

                    b.ToTable("T_WQX_USER_ORGS");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OpenWater2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OpenWater2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenWater2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OpenWater2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TAttainsAssess", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TAttainsAssessUnits", "AttainsAssessUnitIdxNavigation")
                        .WithMany("TAttainsAssess")
                        .HasForeignKey("AttainsAssessUnitIdx")
                        .HasConstraintName("FK__T_ATTAINS__ATTAI__09A971A2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TAttainsAssessCause", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TAttainsAssess", "AttainsAssessIdxNavigation")
                        .WithMany("TAttainsAssessCause")
                        .HasForeignKey("AttainsAssessIdx")
                        .HasConstraintName("FK__T_ATTAINS__ATTAI__123EB7A3")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TAttainsAssessUnits", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TAttainsReport", "AttainsReportIdxNavigation")
                        .WithMany("TAttainsAssessUnits")
                        .HasForeignKey("AttainsReportIdx")
                        .HasConstraintName("FK__T_ATTAINS__ATTAI__02084FDA")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenWater2.Models.Model.TAttainsRefWaterType", "WaterTypeCodeNavigation")
                        .WithMany("TAttainsAssessUnits")
                        .HasForeignKey("WaterTypeCode")
                        .HasConstraintName("FK__T_ATTAINS__WATER__02FC7413")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TAttainsAssessUnitsMloc", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TAttainsAssessUnits", "AttainsAssessUnitIdxNavigation")
                        .WithMany("TAttainsAssessUnitsMloc")
                        .HasForeignKey("AttainsAssessUnitIdx")
                        .HasConstraintName("FK__T_ATTAINS__ATTAI__05D8E0BE")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenWater2.Models.Model.TWqxMonloc", "MonlocIdxNavigation")
                        .WithMany("TAttainsAssessUnitsMloc")
                        .HasForeignKey("MonlocIdx")
                        .HasConstraintName("FK__T_ATTAINS__MONLO__06CD04F7")
                        .IsRequired();
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TAttainsAssessUse", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TAttainsAssess", "AttainsAssessIdxNavigation")
                        .WithMany("TAttainsAssessUse")
                        .HasForeignKey("AttainsAssessIdx")
                        .HasConstraintName("FK__T_ATTAINS__ATTAI__0C85DE4D")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TAttainsAssessUsePar", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TAttainsAssessUse", "AttainsAssessUseIdxNavigation")
                        .WithMany("TAttainsAssessUsePar")
                        .HasForeignKey("AttainsAssessUseIdx")
                        .HasConstraintName("FK__T_ATTAINS__ATTAI__0F624AF8")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TAttainsReport", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TWqxOrganization", "Org")
                        .WithMany("TAttainsReport")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK__T_ATTAINS__ORG_I__7D439ABD")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TAttainsReportLog", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TAttainsReport", "AttainsReportIdxNavigation")
                        .WithMany("TAttainsReportLog")
                        .HasForeignKey("AttainsReportIdx")
                        .HasConstraintName("FK__T_ATTAINS__ATTAI__151B244E")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TOeUserRoles", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TOeRoles", "RoleIdxNavigation")
                        .WithMany("TOeUserRoles")
                        .HasForeignKey("RoleIdx")
                        .HasConstraintName("FK__T_OE_USER__ROLE___1B0907CE")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenWater2.Models.Model.TOeUsers", "UserIdxNavigation")
                        .WithMany("TOeUserRoles")
                        .HasForeignKey("UserIdx")
                        .HasConstraintName("FK__T_OE_USER__USER___1BFD2C07")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxActivity", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TWqxMonloc", "MonlocIdxNavigation")
                        .WithMany("TWqxActivity")
                        .HasForeignKey("MonlocIdx")
                        .HasConstraintName("FK__T_WQX_ACT__MONLO__4316F928");

                    b.HasOne("OpenWater2.Models.Model.TWqxOrganization", "Org")
                        .WithMany("TWqxActivity")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK__T_WQX_ACT__ORG_I__440B1D61")
                        .IsRequired();

                    b.HasOne("OpenWater2.Models.Model.TWqxProject", "ProjectIdxNavigation")
                        .WithMany("TWqxActivity")
                        .HasForeignKey("ProjectIdx")
                        .HasConstraintName("FK__T_WQX_ACT__PROJE__4222D4EF")
                        .IsRequired();
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxActivityMetric", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TWqxActivity", "ActivityIdxNavigation")
                        .WithMany("TWqxActivityMetric")
                        .HasForeignKey("ActivityIdx")
                        .HasConstraintName("FK__T_WQX_ACT__ACTIV__4AB81AF0")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenWater2.Models.Model.TWqxBioHabitatIndex", "BioHabitatIndexIdxNavigation")
                        .WithMany("TWqxActivityMetric")
                        .HasForeignKey("BioHabitatIndexIdx")
                        .HasConstraintName("FK__T_WQX_ACT__BIO_H__4BAC3F29")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxBioHabitatIndex", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TWqxMonloc", "MonlocIdxNavigation")
                        .WithMany("TWqxBioHabitatIndex")
                        .HasForeignKey("MonlocIdx")
                        .HasConstraintName("FK__T_WQX_BIO__MONLO__46E78A0C");

                    b.HasOne("OpenWater2.Models.Model.TWqxOrganization", "Org")
                        .WithMany("TWqxBioHabitatIndex")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK__T_WQX_BIO__ORG_I__47DBAE45")
                        .IsRequired();
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxImportLog", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TWqxOrganization", "Org")
                        .WithMany("TWqxImportLog")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK__T_WQX_IMP__ORG_I__5CD6CB2B")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxImportTempResult", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TWqxImportTempSample", "TempSampleIdxNavigation")
                        .WithMany("TWqxImportTempResult")
                        .HasForeignKey("TempSampleIdx")
                        .HasConstraintName("FK__T_WQX_IMP__TEMP___6754599E")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxImportTemplate", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TWqxOrganization", "Org")
                        .WithMany("TWqxImportTemplate")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK__T_WQX_IMP__ORG_I__5FB337D6")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxImportTemplateDtl", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TWqxImportTemplate", "Template")
                        .WithMany("TWqxImportTemplateDtl")
                        .HasForeignKey("TemplateId")
                        .HasConstraintName("FK__T_WQX_IMP__TEMPL__628FA481")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxImportTranslate", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TWqxOrganization", "Org")
                        .WithMany("TWqxImportTranslate")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK__T_WQX_IMP__ORG_I__71D1E811")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxMonloc", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TWqxOrganization", "Org")
                        .WithMany("TWqxMonloc")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK__T_WQX_MON__ORG_I__3F466844")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxOrgAddress", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TWqxOrganization", "Org")
                        .WithMany("TWqxOrgAddress")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK__T_WQX_ORG__ORG_I__35BCFE0A")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxProject", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TWqxOrganization", "Org")
                        .WithMany("TWqxProject")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK__T_WQX_PRO__ORG_I__3C69FB99")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxRefCharLimits", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TWqxRefCharacteristic", "CharNameNavigation")
                        .WithMany("TWqxRefCharLimits")
                        .HasForeignKey("CharName")
                        .HasConstraintName("FK__T_WQX_REF__CHAR___2E1BDC42")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxRefCharOrg", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TWqxRefCharacteristic", "CharNameNavigation")
                        .WithMany("TWqxRefCharOrg")
                        .HasForeignKey("CharName")
                        .HasConstraintName("FK__T_WQX_REF__CHAR___5441852A")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenWater2.Models.Model.TWqxRefAnalMethod", "DefaultAnalMethodIdxNavigation")
                        .WithMany("TWqxRefCharOrg")
                        .HasForeignKey("DefaultAnalMethodIdx")
                        .HasConstraintName("FK_T_WQX_REF_CHAR_ORG");

                    b.HasOne("OpenWater2.Models.Model.TWqxOrganization", "Org")
                        .WithMany("TWqxRefCharOrg")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK__T_WQX_REF__ORG_I__534D60F1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxRefTaxaOrg", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TWqxOrganization", "Org")
                        .WithMany("TWqxRefTaxaOrg")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK__T_WQX_REF__ORG_I__5812160E")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxResult", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TWqxActivity", "ActivityIdxNavigation")
                        .WithMany("TWqxResult")
                        .HasForeignKey("ActivityIdx")
                        .HasConstraintName("FK__T_WQX_RES__ACTIV__4E88ABD4")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenWater2.Models.Model.TWqxRefAnalMethod", "AnalyticMethodIdxNavigation")
                        .WithMany("TWqxResult")
                        .HasForeignKey("AnalyticMethodIdx")
                        .HasConstraintName("FK__T_WQX_RES__ANALY__5070F446")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OpenWater2.Models.Model.TWqxRefLab", "LabIdxNavigation")
                        .WithMany("TWqxResult")
                        .HasForeignKey("LabIdx")
                        .HasConstraintName("FK__T_WQX_RES__LAB_I__4F7CD00D")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpenWater2.Models.Model.TWqxUserOrgs", b =>
                {
                    b.HasOne("OpenWater2.Models.Model.TWqxOrganization", "Org")
                        .WithMany("TWqxUserOrgs")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK__T_WQX_USE__ORG_I__38996AB5")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenWater2.Models.Model.TOeUsers", "UserIdxNavigation")
                        .WithMany("TWqxUserOrgs")
                        .HasForeignKey("UserIdx")
                        .HasConstraintName("FK__T_WQX_USE__USER___398D8EEE")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
